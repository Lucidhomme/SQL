--조인은 equals join(기본키와 외래키 관계가있는 상태)과 NOT equals join(기본키와 외래키 관계X)으로 나뉜다
--ANSI표준에서 USING구문을 이용한것 = equals join(관계를 가진 테이블사이), ON구문을 이용한 것 = NOT equals join(관계를 가지지않는 테이블 사이)
--LEFT,RIGHT,FULL 누락되는 값들 조인
--오라클에서는 (+)값 반대쪽의 누락된 데이터가 나옴 EX) D.DEPT_ID(+) = E.DEPT_ID ; : E.DEPT_ID의 누락된 데이터 나옴 
--NATURAL, CROSS 조인 굳이 사용 X
--테이블간에 공통적인 키가 있더라도 누군가의 부모키가 외래키로 되어야 관계를 맺을 수 있음

SELECT EMP_NAME, DEPT_NAME
FROM   EMPLOYEE
JOIN   DEPARTMENT USING(DEPT_ID)
WHERE  JOB_ID = 'J6' ;

SELECT EMP_NAME, LOC_ID
FROM   EMPLOYEE2
JOIN   DEPARTMENT USING(DEPT_ID, LOC_ID) ;

SELECT DEPT_NAME,
       LOC_DESCRIBE
FROM   DEPARTMENT
JOIN   LOCATION ON(LOC_ID = LOCATION_ID) ;

SELECT EMP_NAME, DEPT_NAME
FROM   EMPLOYEE
LEFT JOIN DEPARTMENT USING (DEPT_ID) ;

SELECT EMP_NAME, DEPT_NAME
FROM   EMPLOYEE
RIGHT JOIN DEPARTMENT USING (DEPT_ID) ;

SELECT EMP_NAME, DEPT_NAME
FROM   EMPLOYEE
FULL JOIN DEPARTMENT USING (DEPT_ID) ;

SELECT *
FROM   EMPLOYEE ;

SELECT E.EMP_NAME AS 직원,
       M.EMP_NAME AS 관리자,
       P.EMP_NAME AS 상급관리자
FROM   EMPLOYEE E
LEFT JOIN   EMPLOYEE M ON (E.MGR_ID = M.EMP_ID)
LEFT JOIN   EMPLOYEE P ON (M.MGR_ID = P.EMP_ID)
ORDER BY 1 ;

SELECT EMP_NAME,
       JOB_TITLE,
       DEPT_NAME
FROM   EMPLOYEE 
JOIN   JOB USING(JOB_ID)
JOIN   DEPARTMENT USING(DEPT_ID)
ORDER  BY 1 ;

SELECT EMP_NAME,
       JOB_TITLE,
       DEPT_NAME,
       LOC_DESCRIBE,
       COUNTRY_NAME,
       SLEVEL
FROM   EMPLOYEE
JOIN   JOB USING(JOB_ID)
JOIN   DEPARTMENT USING(DEPT_ID)
JOIN   LOCATION ON(LOC_ID = LOCATION_ID)
JOIN   COUNTRY USING(COUNTRY_ID)
JOIN   SAL_GRADE ON(SALARY BETWEEN LOWEST AND HIGHEST) 
ORDER BY 1 ;

SELECT COUNTRY_NAME,
       LOC_DESCRIBE,
       DEPT_NAME,
       EMP_NAME,
       JOB_TITLE,
       SLEVEL
FROM   COUNTRY
JOIN   LOCATION USING(COUNTRY_ID)
RIGHT JOIN   DEPARTMENT ON(LOCATION_ID = LOC_ID)
RIGHT JOIN   EMPLOYEE USING(DEPT_ID)
JOIN   JOB USING(JOB_ID)
JOIN   SAL_GRADE ON(SALARY BETWEEN LOWEST AND HIGHEST)
ORDER BY 6 ;

SELECT EMP_NAME,
       DEPT_NAME
FROM   EMPLOYEE
JOIN   JOB USING(JOB_ID)
JOIN   DEPARTMENT USING(DEPT_ID)
JOIN   LOCATION ON(LOC_ID=LOCATION_ID)
WHERE  JOB_TITLE='대리'
AND    LOC_DESCRIBE LIKE '아시아%' ;

SELECT EMP_ID,
       ROLE_NAME
FROM   EMPLOYEE_ROLE  
MINUS
SELECT EMP_ID,
       ROLE_NAME
FROM   ROLE_HISTORY ;

SELECT EMP_NAME,
       JOB_ID,
       HIRE_DATE
FROM   EMPLOYEE
WHERE  DEPT_ID = '20' 
UNION
SELECT DEPT_NAME,
       DEPT_ID,
       NULL
FROM   DEPARTMENT
WHERE  DEPT_ID = '20' ;


SELECT EMP_NAME,
       EMP_NO,
       JOB_ID
FROM   EMPLOYEE
WHERE  DEPT_ID = '20'
UNION
SELECT DEPT_NAME,
       DEPT_ID
FROM   DEPARTMENT
WHERE  DEPT_ID = '20' ;


SELECT EMP_NAME,
       TO_CHAR(SALARY)
FROM   EMPLOYEE
WHERE  DEPT_ID = '20'
UNION
SELECT DEPT_NAME,
       DEPT_ID
FROM   DEPARTMENT
WHERE  DEPT_ID = '20' 
ORDER BY 2 ;

SELECT EMP_ID,
       EMP_NAME,
       '관리자' AS 구분
FROM   EMPLOYEE
WHERE  EMP_ID = '141'
AND    DEPT_ID = '50'
UNION
SELECT EMP_ID,
       EMP_NAME,
       '직원' AS 구분
FROM   EMPLOYEE
WHERE  DEPT_ID = '50'
AND    EMP_ID != '141' ;

SELECT *
FROM   EMPLOYEE ;

SELECT EMP_ID,
       EMP_NAME,
       CASE WHEN EMP_ID = 141 THEN '관리자'
       ELSE '직원'
       END AS 구분
FROM   EMPLOYEE
WHERE  DEPT_ID = '50' ;

SELECT EMP_NAME,
       '사원'직급
FROM   EMPLOYEE
JOIN   JOB USING(JOB_ID)
WHERE  JOB_TITLE = '사원'
UNION
SELECT EMP_NAME, 
       '대리'직급
FROM   EMPLOYEE
JOIN   JOB USING(JOB_ID)
WHERE  JOB_TITLE = '대리'
ORDER BY 2,1 ;


SELECT EMP_NAME,
       JOB_ID,
       SALARY
FROM   EMPLOYEE
WHERE  JOB_ID = (SELECT JOB_ID
                 FROM   EMPLOYEE
                 WHERE  EMP_NAME = '나승원')
AND    SALARY > (SELECT SALARY
                 FROM   EMPLOYEE
                 WHERE  EMP_NAME = '나승원') ;

SELECT EMP_NAME,
       JOB_ID,
       SALARY
FROM   EMPLOYEE
WHERE  SALARY = (SELECT MIN(SALARY)
                 FROM EMPLOYEE) ;
                 
SELECT EMP_NAME,
       JOB_ID,
       SALARY
FROM   EMPLOYEE
WHERE  SALARY = (SELECT MAX(SALARY)
                 FROM EMPLOYEE) ;
                 
SELECT DEPT_NAME,
       SUM(SALARY)
FROM   EMPLOYEE
LEFT JOIN   DEPARTMENT USING(DEPT_ID)
GROUP  BY DEPT_ID, DEPT_NAME 
HAVING SUM(SALARY) = (SELECT MAX(SUM(SALARY))
                      FROM EMPLOYEE
                      GROUP BY DEPT_ID) ;
--두 쿼리에서 셀렉값 의 개수가 같아야하고 셀렉값의 타입이 같아야함
--NOT IN 사용시 NULL인 정보 가져오면 안됨

SELECT EMP_ID,
       EMP_NAME,
       '관리자' AS 구분
FROM   EMPLOYEE
WHERE  EMP_ID IN (SELECT MGR_ID FROM EMPLOYEE)
UNION
SELECT EMP_ID,
       EMP_NAME,
       '직원'
FROM   EMPLOYEE
WHERE  EMP_ID NOT IN (SELECT MGR_ID FROM EMPLOYEE
                      WHERE  MGR_ID IS NOT NULL)
ORDER BY 3,1;

SELECT *
FROM   EMPLOYEE ;

SELECT EMP_ID,
       EMP_NAME,
       '관리자' AS 구분
FROM   EMPLOYEE
WHERE  EMP_ID IN (SELECT MGR_ID FROM EMPLOYEE)
UNION
SELECT EMP_ID,
       EMP_NAME,
       '직원'
FROM   EMPLOYEE
WHERE  EMP_ID NOT IN (SELECT MGR_ID FROM EMPLOYEE
                     WHERE MGR_ID IS NOT NULL)
ORDER BY 3,1;


SELECT EMP_ID,
       EMP_NAME,
       CASE WHEN MGR_ID IS NOT NULL THEN '관리자'
       ELSE '직원'
       END AS 구분
FROM   EMPLOYEE
ORDER BY 3,1 ; 

SELECT EMP_ID,
       EMP_NAME,
       CASE WHEN EMP_ID IN (SELECT MGR_ID FROM EMPLOYEE) THEN '관리자'
       ELSE '직원'
       END AS 구분
FROM   EMPLOYEE
ORDER BY 3,1 ;

---셀렉절에 명시된 서브쿼리
--A >ALL B   B최대값보다 큰 A
--A <ALL B   B최소값보다 작은A
--A <ANY B  B최대값보다 작은 A
--A >ANY B  B최소값보다 큰 A
SELECT EMP_NAME,
       SALARY
FROM   EMPLOYEE
JOIN   JOB USING(JOB_ID)
WHERE  JOB_TITLE = '대리'
AND    SALARY > ANY (SELECT SALARY
                     FROM   EMPLOYEE
                     JOIN   JOB USING(JOB_ID)
                     WHERE  JOB_TITLE = '과장');
                     
SELECT EMP_NAME,
       SALARY
FROM   EMPLOYEE
JOIN   JOB USING(JOB_ID)
WHERE  JOB_TITLE = '대리'
AND    SALARY < ANY (SELECT SALARY
                     FROM   EMPLOYEE
                     JOIN   JOB USING(JOB_ID)
                     WHERE  JOB_TITLE = '과장');

SELECT EMP_NAME,
       SALARY
FROM   EMPLOYEE
JOIN   JOB USING(JOB_ID)
WHERE  JOB_TITLE = '대리'
AND    SALARY > ALL (SELECT SALARY
                     FROM   EMPLOYEE
                     JOIN   JOB USING(JOB_ID)
                     WHERE  JOB_TITLE = '과장');
                     
SELECT EMP_NAME,
       SALARY
FROM   EMPLOYEE
JOIN   JOB USING(JOB_ID)
WHERE  JOB_TITLE = '대리'
AND    SALARY < ALL (SELECT SALARY
                     FROM   EMPLOYEE
                     JOIN   JOB USING(JOB_ID)
                     WHERE  JOB_TITLE = '과장');
                     
--1. 직급별 평균급여(계산의 편의를 위해서 정수5자리에서 절삭)
SELECT *
FROM   EMPLOYEE ;


SELECT JOB_ID,
       TRUNC(AVG(SALARY),-5) AS 직급별평균급여
FROM   EMPLOYEE
GROUP BY JOB_ID 
ORDER BY 1 ;

SELECT JOB_TITLE,
       TRUNC(AVG(SALARY),-5) AS 직급별평균급여
FROM   EMPLOYEE
JOIN   JOB USING(JOB_ID)
GROUP BY JOB_TITLE 
ORDER BY 1 ;

--2. 평균급여를 받는 직원의 이름, 직급, 급여를 조회
SELECT EMP_NAME,
       JOB_TITLE,
       SALARY
FROM   EMPLOYEE
JOIN   JOB USING(JOB_ID)
WHERE  (JOB_ID, SALARY) IN (SELECT JOB_ID, TRUNC(AVG(SALARY),-5)
                        FROM   EMPLOYEE
                        GROUP BY JOB_ID);
--다중행의 다중열 서브쿼리(WHERE절의 서브쿼리)

SELECT EMP_NAME,
       JOB_TITLE,
       SALARY
FROM   (SELECT JOB_ID, TRUNC(AVG(SALARY),-5) AS JOB_AVG
        FROM   EMPLOYEE
        GROUP BY JOB_ID) V
JOIN   EMPLOYEE E ON(SALARY = JOB_AVG AND E.JOB_ID = V.JOB_ID)
JOIN   JOB J ON(J.JOB_ID = E.JOB_ID)
ORDER BY JOB_TITLE ;