--테이블생성

CREATE TABLE CUSTOMERS
( CNO    NUMBER(5) PRIMARY KEY,
  CNAME  VARCHAR2(10) NOT NULL,
  ADDRESS VARCHAR2(50) NOT NULL,
  EMAIL  VARCHAR2(20) NOT NULL,
  PHONE  VARCHAR2(20) NOT NULL ) ;

INSERT INTO CUSTOMERS
VALUES (101, '김철수', '서울 강남구', 'cskim@naver.com', '899-6666');

INSERT INTO CUSTOMERS
VALUES (102, '이영희', '부산 서면', 'yhlee@empal.com', '355-8882');

INSERT INTO CUSTOMERS
VALUES (103, '최진국', '제주 동광양', 'jkchoi@gmail.com', '852-5764');

INSERT INTO CUSTOMERS
VALUES (104, '강준호', '강릉 홍제동', 'jhkang@hanmail.com', '559-7777');

INSERT INTO CUSTOMERS
VALUES (105, '민병국', '대전 전민동', 'bgmin@hotmail.com', '559-8741');

INSERT INTO CUSTOMERS
VALUES (106, '오민수', '광주 북구', 'msoh@microsoft.com', '542-9988');
  
CREATE TABLE ORDERS
( ORDERNO NUMBER(10) PRIMARY KEY,
  ORDERDATE DATE DEFAULT SYSDATE NOT NULL,
  ADDRESS VARCHAR2(50) NOT NULL,
  PHONE VARCHAR2(20) NOT NULL,
  STATUS VARCHAR2(20) NOT NULL,
  CNO NUMBER(5) NOT NULL ,
  FOREIGN KEY (CNO) REFERENCES CUSTOMERS(CNO),
  CONSTRAINT CHK_STS CHECK(STATUS IN('결제완료','배송중','배송완료')));
  
CREATE TABLE PRODUCTS
( PNO NUMBER(5) PRIMARY KEY,
  PNAME VARCHAR2(20) NOT NULL,
  COST  NUMBER(8) DEFAULT 0 NOT NULL,
  STOCK NUMBER(5) DEFAULT 0 NOT NULL ) ;
  
INSERT INTO PRODUCTS
VALUES (1001, '삼양라면', 1000, 200);

INSERT INTO PRODUCTS
VALUES (1002, '새우깡', 1500, 500);

INSERT INTO PRODUCTS
VALUES (1003, '월드콘', 2000, 350);

INSERT INTO PRODUCTS
VALUES (1004, '빼빼로', 2000, 700);

INSERT INTO PRODUCTS
VALUES (1005, '코카콜라', 1800, 550);

INSERT INTO PRODUCTS
VALUES (1006, '환타', 1600, 300);
  

CREATE TABLE ORDERDETAIL
( ORDERNO NUMBER(10), 
  PNO     NUMBER(5),
  QTY     NUMBER(5) DEFAULT 0,
  COST    NUMBER(8) DEFAULT 0,
  PRIMARY KEY(ORDERNO,PNO) ,
  FOREIGN KEY(ORDERNO) REFERENCES ORDERS(ORDERNO),
  FOREIGN KEY(PNO) REFERENCES PRODUCTS(PNO) );
  
CREATE TABLE MEMBER
( MEMBER_ID NUMBER(10) PRIMARY KEY,
  NAME VARCHAR2(25) NOT NULL,
  ADDRESS VARCHAR2(100),
  CITY VARCHAR2(30),
  PHONE VARCHAR2(15),
  JOIN_DATE DATE DEFAULT SYSDATE NOT NULL) ;
  
CREATE TABLE TITLE
( TITLE_ID NUMBER(10) PRIMARY KEY,
  TITLE    VARCHAR2(60) NOT NULL,
  DESCRIPTION VARCHAR2(400) NOT NULL,
  RATING   VARCHAR2(20),
  CATEGORY VARCHAR2(20),
  RELEASE_DATE DATE,
  CONSTRAINT CHK_RT CHECK(RATING IN('18가','15가','12가','전체가')),
  CONSTRAINT CHK_CG CHECK(CATEGORY IN('드라마','코미디','액션','아동','SF','다큐멘터리')) 
  );
  
CREATE TABLE TITLE_COPY
( COPY_ID NUMBER(10),
  TITLE_ID NUMBER(10),
  STATUS  VARCHAR2(20) NOT NULL,
  PRIMARY KEY(COPY_ID, TITLE_ID),
  FOREIGN KEY(TITLE_ID) REFERENCES TITLE(TITLE_ID),
  CONSTRAINT CHK_STS2 CHECK(STATUS IN('대여가능','파손','대여중','예약'))
);

CREATE TABLE RENTAL
( RES_DATE DATE,
  MEMBER_ID NUMBER(10),
  TITLE_ID NUMBER(10),
  PRIMARY KEY(MEMBER_ID, TITLE_ID),
  FOREIGN KEY(MEMBER_ID) REFERENCES MEMBER(MEMBER_ID),
  FOREIGN KEY(TITLE_ID) REFERENCES TITLE(TITLE_ID) ) ;
  
DROP TABLE RENTAL ;

CREATE TABLE RENTAL
( BOOK_DATE DATE DEFAULT SYSDATE,
  MEMBER_ID NUMBER(10),
  COPY_ID   NUMBER(10),
  TITLE_ID  NUMBER(10),
  ACT_RET_DATE DATE,
  EXP_RET_DATE DATE DEFAULT SYSDATE+2,
  PRIMARY KEY(BOOK_DATE,MEMBER_ID,COPY_ID,TITLE_ID),
  FOREIGN KEY(MEMBER_ID) REFERENCES MEMBER(MEMBER_ID),
  FOREIGN KEY(COPY_ID,TITLE_ID) REFERENCES TITLE_COPY(COPY_ID,TITLE_ID) );
  
CREATE TABLE RESERVATION
( RES_DATE DATE,
  MEMBER_ID NUMBER(10),
  TITLE_ID NUMBER(10),
  PRIMARY KEY(RES_DATE, MEMBER_ID, TITLE_ID),
  FOREIGN KEY(MEMBER_ID) REFERENCES MEMBER(MEMBER_ID),
  FOREIGN KEY(TITLE_ID) REFERENCES TITLE(TITLE_ID) );
  
--4.
INSERT INTO ORDERS
VALUES (1,SYSDATE-3,'서울 강남구','899-6666','결제완료',101);

INSERT INTO ORDERDETAIL
VALUES (1,1001,50,1000);

SELECT *
FROM  ORDERS;
SELECT *
FROM  ORDERDETAIL;

--5.
SELECT *
FROM  PRODUCTS;

UPDATE PRODUCTS
SET    STOCK = 150
WHERE  PNO = 1001 ;

SELECT *
FROM   PRODUCTS;

--6.
INSERT INTO ORDERS
VALUES (2, SYSDATE-2,'부산 수영구','337-5000','결제완료',102);

INSERT INTO ORDERDETAIL
VALUES (1, 1002, 100, 1500);

INSERT INTO ORDERDETAIL
VALUES (2, 1003, 150, 2000);

UPDATE ORDERDETAIL
SET    ORDERNO = 2
WHERE  PNO = 1002;

SELECT *
FROM  ORDERDETAIL;

--7.
UPDATE PRODUCTS 
SET    STOCK = 400
WHERE  PNO = 1002 ;

UPDATE PRODUCTS
SET    STOCK = 200
WHERE  PNO = 1003 ;

--8. 
INSERT INTO ORDERS
VALUES (3, SYSDATE-1, '광주 북구', '652-2277','결제완료',106);

INSERT INTO ORDERDETAIL
VALUES (3, 1004, 100, 2000);

INSERT INTO ORDERDETAIL
VALUES (3, 1005, 50, 1800);

SELECT *
FROM   ORDERDETAIL;

--9.
UPDATE PRODUCTS
SET    STOCK = 600
WHERE  PNO = 1004;

UPDATE PRODUCTS
SET    STOCK = 500
WHERE  PNO = 1005;

--10.
SELECT O.ORDERDATE, 
       C.CNAME,
       O.ADDRESS,
       O.PHONE,
       O.STATUS,
       P.PNAME,
       D.COST,
       D.QTY,
       D.COST*QTY
FROM   CUSTOMERS C
JOIN   ORDERS O USING(CNO)
JOIN   ORDERDETAIL D USING(ORDERNO)
JOIN   PRODUCTS P ON(D.PNO = P.PNO);

--11.
SELECT ORDERDATE,
       SUM(COST*QTY)
FROM   ORDERS
JOIN   ORDERDETAIL USING(ORDERNO)
Group by ORDERDATE ;

--12.
INSERT INTO PRODUCTS
VALUES (1007, '목캔디', 3000, 500);

--13.
SELECT *
FROM   PRODUCTS;

SELECT *
FROM   ORDERS;

INSERT INTO ORDERS
VALUES (4,SYSDATE,'제주 동광양','352-4657','결제완료',103);

SELECT *
FROM   ORDERDETAIL;

INSERT INTO ORDERDETAIL
VALUES (4, 1007, 200, 3000);

SELECt *
FROM   CUSTOMERS;

SELECT O.ORDERDATE, 
       C.CNAME,
       O.ADDRESS,
       O.PHONE,
       O.STATUS,
       P.PNAME,
       D.COST,
       D.QTY,
       D.COST*QTY
FROM   CUSTOMERS C
JOIN   ORDERS O USING(CNO)
JOIN   ORDERDETAIL D USING(ORDERNO)
JOIN   PRODUCTS P ON(D.PNO = P.PNO);
---------------DDL 실습 1 끝-----------------
SELECT *
FROM   MEMBER;

SELECT *
FROM   TITLE;

--2.
CREATE SEQUENCE MEMBER_ID_SEQ
  START WITH 101
  NOCACHE ;
  
CREATE SEQUENCE TITLE_ID_SEQ
  START WITH 92
  NOCACHE ;
  
--3.
SELECT *
FROM   TITLE;

INSERT INTO TITLE
VALUES      (TITLE_ID_SEQ.NEXTVAL ,'인어공주','인어공주 설명','전체가','아동','95/10/05');

INSERT INTO TITLE
VALUES      (TITLE_ID_SEQ.NEXTVAL, '매트릭스','매트릭스 설명','15가','SF','95/05/19');

INSERT INTO TITLE
VALUES      (TITLE_ID_SEQ.NEXTVAL, '에이리언','에이리언 설명','18가','SF','95/08/12');

INSERT INTO TITLE
VALUES      (TITLE_ID_SEQ.NEXTVAL, '모던타임즈','모던타임즈 설명', '전체가', '코미디', '95/07/12');

INSERT INTO TITLE
VALUES      (TITLE_ID_SEQ.NEXTVAL, '러브스토리','러브스토리 설명', '전체가', '드라마', '95/09/12');

INSERT INTO TITLE
VALUES      (TITLE_ID_SEQ.NEXTVAL, '람보', '람보 설명', '18가', '액션', '95/06/01');

SELECT *
FROM   TITLE;

--4.
SELECT *
FROM   MEMBER;

INSERT INTO MEMBER
VALUES  (MEMBER_ID_SEQ.NEXTVAL,'김철수','강남구','서울','899-6666','90/03/08');

INSERT INTO MEMBER
VALUES  (MEMBER_ID_SEQ.NEXTVAL,'이영희','서면','부산','355-8882','90/03/08');

INSERT INTO MEMBER
VALUES  (MEMBER_ID_SEQ.NEXTVAL,'최진국','동광양','제주','852-5764','91/06/17');

INSERT INTO MEMBER
VALUES  (MEMBER_ID_SEQ.NEXTVAL, '강준호', '홍제동', '강릉', '559-7777','90/04/07');

INSERT INTO MEMBER
VALUES  (MEMBER_ID_SEQ.NEXTVAL, '민병국', '전민동', '대전', '559-8741','91/01/18');

INSERT INTO MEMBER
VALUES  (MEMBER_ID_SEQ.NEXTVAL, '오민수', '북구', '광주', '542-9988','91/01/18');

SELECT *
FROM   MEMBER;

--5.
SELECT *
FROM   TITLE_COPY ;

SELECT *
FROM   TITLE;

SELECT *
FROM  RENTAL;

INSERT INTO TITLE_COPY
VALUES (1,(SELECT TITLE_ID FROM TITLE WHERE TITLE = '인어공주'),'대여가능');

INSERT INTO TITLE_COPY
VALUES (1,(SELECT TITLE_ID FROM TITLE WHERE TITLE = '매트릭스'),'대여가능');

INSERT INTO TITLE_COPY
VALUES (2,(SELECT TITLE_ID FROM TITLE WHERE TITLE = '매트릭스'),'대여중');

INSERT INTO TITLE_COPY
VALUES (1,(SELECT TITLE_ID FROM TITLE WHERE TITLE = '에이리언'),'대여가능');

INSERT INTO TITLE_COPY
VALUES (1,(SELECT TITLE_ID FROM TITLE WHERE TITLE = '모던타임즈'),'대여가능');

INSERT INTO TITLE_COPY
VALUES (2,(SELECT TITLE_ID FROM TITLE WHERE TITLE = '모던타임즈'),'대여가능');

INSERT INTO TITLE_COPY
VALUES (3, (SELECT TITLE_ID FROM TITLE WHERE TITLE = '모던타임즈'),'대여중');

INSERT INTO TITLE_COPY
VALUES (1,(SELECT TITLE_ID FROM TITLE WHERE TITLE = '러브스토리'),'대여가능');

INSERT INTO TITLE_COPY
VALUES (1,(SELECT TITLE_ID FROM TITLE WHERE TITLE = '람보'),'대여가능');

SELECT *
FROM   TITLE_COPY;

--6.
SELECT *
FROM  RENTAL;

SELECT *
FROM  MEMBER;

INSERT INTO RENTAL
VALUES(SYSDATE-3,(SELECT MEMBER_ID FROM MEMBER WHERE NAME = '김철수'),1,(SELECT TITLE_ID FROM TITLE WHERE TITLE = '인어공주'),SYSDATE-2,SYSDATE-1);

INSERT INTO RENTAL
VALUES(SYSDATE-1,(SELECT MEMBER_ID FROM MEMBER WHERE NAME = '최진국'),2,(SELECT TITLE_ID FROM TITLE WHERE TITLE = '매트릭스'),NULL,SYSDATE+1);

INSERT INTO RENTAL
VALUES(SYSDATE-2,(SELECT MEMBER_ID FROM MEMBER WHERE NAME = '강준호'),3,(SELECT TITLE_ID FROM TITLE WHERE TITLE = '모던타임즈'),NULL,SYSDATE);

INSERT INTO RENTAL
VALUES(SYSDATE-4,(SELECT MEMBER_ID FROM MEMBER WHERE NAME = '민병국'),1,(SELECT TITLE_ID FROM TITLE WHERE TITLE = '람보'),SYSDATE-2,SYSDATE-2);

SELECT *
FROM   RENTAL;

--7.
CREATE OR REPLACE VIEW TITLE_AVAIL
AS SELECT TITLE,COPY_ID,STATUS,EXP_RET_DATE
FROM TITLE 
LEFT JOIN TITLE_COPY USING(TITLE_ID)
LEFT JOIN RENTAL USING(COPY_ID,TITLE_ID);
--기본키인 TITLE_ID도 별도로 관계를 지정해주어야함
--외래키끼리 무조건 USING사용못하는게 아니라 USING하고 ON은 같지만 USING은 키끼리 이름같고 ON은 다를때 

SELECT *
FROM TITLE;

SELECT *
FROM  TITLE_COPY;

SELECT *
FROM  RENTAL;

SELECT *
FROM TITLE_AVAIL;

--8.
--A
SELECT *
FROM  TITLE ;

DELETE FROM TITLE
WHERE TITLE_ID = 100 ;

INSERT INTO TITLE
VALUES(TITLE_ID_SEQ.NEXTVAL, '스타워즈','스타워즈 설명','전체가','SF','77/07/07');

SELECT *
FROM  TITLE_COPY;

INSERT INTO TITLE_COPY
VALUES (1,(SELECT TITLE_ID FROM TITLE WHERE TITLE = '스타워즈'),'대여가능');

INSERT  INTO TITLE_COPY
VALUES  (2,(SELECT TITLE_ID FROM TITLE WHERE TITLE = '스타워즈'), '대여가능');

SELECT *
FROM RESERVATION;
SELECT *
FROM  MEMBER;
SELECT *
FROM  TITLE;
--B
INSERT INTO RESERVATION
VALUES(SYSDATE,(SELECT MEMBER_ID FROM MEMBER WHERE NAME = '이영희'),(SELECT TITLE_ID FROM TITLE WHERE TITLE = '스타워즈'));

INSERT INTO RESERVATION
VALUES(SYSDATE,(SELECT MEMBER_ID FROM MEMBER WHERE NAME = '오민수'),(SELECT TITLE_ID FROM TITLE WHERE TITLE = '러브스토리'));

SELECT *
FROM  RESERVATION;

--C
DELETE FROM RESERVATION
WHERE MEMBER_ID = 102;

SELECT *
FROM  RENTAL;

SELECT *
FROM MEMBER;

INSERT INTO RENTAL
VALUES(SYSDATE,(SELECT MEMBER_ID FROM MEMBER WHERE NAME='이영희'),1,(SELECT TITLE_ID FROM TITLE WHERE TITLE = '스타워즈'),'',DEFAULT);

SELECT *
FROM   TITLE_COPY;

UPDATE TITLE_COPY
SET STATUS = '대여중'
WHERE TITLE_ID = (SELECT TITLE_ID FROM TITLE WHERE TITLE = '스타워즈')
AND COPY_ID = 1 ; 

SELECT *
FROM  TITLE_AVAIL;

--9.
ALTER TABLE TITLE
ADD PRICE NUMBER(5);

UPDATE TITLE
SET PRICE = 3000
WHERE TITLE = '인어공주'
OR TITLE = '모던타임즈';

UPDATE TITLE
SET PRICE = 2500
WHERE TITLE = '매트릭스';

UPDATE TITLE
SET PRICE = 2000
WHERE TITLE = '에이리언'
OR TITLE = '람보';

UPDATE TITLE
SET PRICE = 3500
WHERE TITLE = '러브스토리';

UPDATE TITLE
SET PRICE = 1500
WHERE TITLE = '스타워즈';

ALTER TABLE TITLE
MODIFY PRICE NOT NULL;

--10.
SELECT *
FROM   TITLE;

SELECT *
FROM TITLE_COPY;

SELECT *
FROM  RENTAL;

SELECT *
FROM MEMBER ;

SELECT*
FROM RESERVATION;


SELECT M.NAME AS 회원명,
       T.TITLE AS 제목,
       R.BOOK_DATE AS 대여일,
       (R.ACT_RET_DATE - R.BOOK_DATE) AS 기간 
FROM   MEMBER M
JOIN   RENTAL R USING(MEMBER_ID)
JOIN   TITLE T ON(R.TITLE_ID = T.TITLE_ID) ;
------------------------------------------------DDL2 실습끝---------------------------------------